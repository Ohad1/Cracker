import pytest
from Master.JobExecutor import JobExecutor

RANGES = [[(0, 100000000)],
          [(0, 50000000), (50000000, 100000000)],
          [(0, 33333333), (33333333, 66666666), (66666666, 100000000)],
          [(0, 25000000), (25000000, 50000000), (50000000, 75000000), (75000000, 100000000)],
          [(0, 20000000), (20000000, 40000000), (40000000, 60000000), (60000000, 80000000), (80000000, 100000000)],
          [(0, 16666666), (16666666, 33333333), (33333333, 50000000), (50000000, 66666666), (66666666, 83333333),
           (83333333, 100000000)],
          [(0, 14285714), (14285714, 28571428), (28571428, 42857142), (42857142, 57142857), (57142857, 71428571),
           (71428571, 85714285), (85714285, 100000000)],
          [(0, 12500000), (12500000, 25000000), (25000000, 37500000), (37500000, 50000000), (50000000, 62500000),
           (62500000, 75000000), (75000000, 87500000), (87500000, 100000000)],
          [(0, 11111111), (11111111, 22222222), (22222222, 33333333), (33333333, 44444444), (44444444, 55555555),
           (55555555, 66666666), (66666666, 77777777), (77777777, 88888888), (88888888, 100000000)],
          [(0, 10000000), (10000000, 20000000), (20000000, 30000000), (30000000, 40000000), (40000000, 50000000),
           (50000000, 60000000), (60000000, 70000000), (70000000, 80000000), (80000000, 90000000),
           (90000000, 100000000)]]


@pytest.fixture(params=RANGES)
def hash_range(request):
    return request.param


def test_hash_ranges(hash_range):
    job_executor = JobExecutor(['h1', 'h2'], ['123' for _ in range(len(hash_range))], 'm1')
    actual = job_executor.get_ranges()
    assert len(actual) == len(hash_range)
    for (expected_start, expected_end), (actual_start, actual_end) in zip(hash_range, actual):
        assert expected_start == actual_start and expected_end == actual_end
